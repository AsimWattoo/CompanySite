@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using Company_Site.Helpers;
@using Company_Site.Pages.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Radzen.Blazor
@using Radzen;
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject UserManager<User> userManager
@inject ApplicationDbContext dbContext
@inject NavigationManager navigationManager
@inject ApplicationState _applicationState

<PageTitle>Company Site</PageTitle>

<AuthorizeView>

    <Authorized>
        <CascadingValue Value="@IsLoggedIn" Name="IsLoggedIn">
            <CascadingValue Value="@IsAdmin" Name="IsAdmin">
                <CascadingValue Value="@Pages" Name="Pages">
                    <CascadingValue Value="@UserId" Name="UserId">
                        <div class="page container-fluid">
                            @if(IsLoggedIn){
                                <div class="container-fluid overflow-hidden">
                                    <div class="row bg-white @(IsCollapsed ? "col-collapsed": "")">
                                        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 user-info col-panel d-flex justify-content-center overflow-hidden">
                                            <div class="user-info-panel d-flex align-items-center justify-content-center m-0 @(IsCollapsed ? "collapsed" : "")">
                                                <div class="img">
                                                    <img src="./img/profile.jpeg"/>
                                                </div>
                                                <div class="info">
                                                    <p class="mb-0 fs-4 fw-bold title-text">@user.UserName</p>
                                                    <p class="mb-0 email color-gray title-text">@user.Email</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-xl-10 col-lg-9 col-md-8 col-sm-6 col-12 px-0">
                                            <div class="row p-0 h-100 me-0">
                                                <div class="d-flex align-items-center overflow-hidden">
                                                    <div class="col-xl-10 col-lg-10 col-md-10 col-sm-8 col-12 d-flex justify-content-center mx-2">
                                                            <div class="search-bar d-flex align-items-center justify-content-start">
                                                            <i class="fa fa-search"></i>
                                                            <RadzenDropDown class="form-select top-search-bar ms-1" 
                                                                LoadData="LoadAccountData" 
                                                                AllowFiltering="true" 
                                                                TValue="string" 
                                                                Value=_applicationState.BorrowerCode 
                                                                Data="FilteredAccounts" 
                                                                TextProperty="Company" 
                                                                ValueProperty="BorrowerCode" 
                                                                Change="OnAccountChange"/>
                                                        </div>
                                                    </div>
                                                    <div class="panel"></div>
                                                    <div class=" col-xl-2 col-lg-2 col-md-2 col-sm-4 col-3 d-flex justify-content-end pe-5">
                                                        <a class="nav-bar-btn mx-1">
                                                            <i class="fa fa-bell"></i>
                                                        </a>
                                                        @if(IsAdmin){
                                                            <a class="nav-bar-btn mx-1" href="/admin">
                                                                <i class="fa fa-user-tie"></i>
                                                            </a>                                                            
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row @(IsCollapsed ? "col-collapsed": "")">
                                        <div class=" col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 p-0 col-panel">
                                            <div class="@(IsCollapsed ? "collapsed" : "") sidebar h-100">
                                                <a class="nav-bar-collapse-btn" @onclick="NavBarCollapseBtnClicked">
                                                    <i class="fa fa-angle-double-left"></i>
                                                </a>
                                                <NavMenu IsCollapsed="@IsCollapsed"/>
                                            </div>
                                        </div>
                                        <main class="col-xl-10 col-lg-9 col-md-8 col-sm-6 col-12 border-top-light px-2">
                                            <article class="content px-2 overflow-hidden">
                                                @Body
                                            </article>
                                        </main>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <main class="container-fluid ">
                                        <article class="content overflow-hidden">
                                        @Body
                                    </article>
                                </main>   
                            }
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>

	</Authorized>

	<NotAuthorized>
	</NotAuthorized>

</AuthorizeView>

@code{

    public bool IsLoggedIn { get; set; }

    public bool IsAdmin { get; set; }

    public List<UserPages> Pages { get; set; } = new List<UserPages>();

    public string UserId { get; set; }

    public bool IsCollapsed { get; set; } = false;

    public string ReturnUrl { get; set; } = "/";

    public User user;

    /// <summary>
    /// The selected account
    /// </summary>
    private Account? _Account { get; set; }

    /// <summary>
    /// The list of all the accounts
    /// </summary>
    private List<Account> Accounts { get; set; } = new List<Account>();

    /// <summary>
    /// The list of filtered accounts
    /// </summary>
    private List<Account> FilteredAccounts { get; set; } = new List<Account>();

    protected override async Task OnInitializedAsync()
    {
        string newUri = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        if (string.IsNullOrEmpty(newUri))
            ReturnUrl = "/";
        else
            ReturnUrl = $"/{newUri}";
        AuthenticationState state = await authStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.Name == null)
        {
            //If the user is not logged in then send to login page
            IsLoggedIn = false;
            navigationManager.NavigateTo($"login?returnUrl={ReturnUrl}", true);
        }
        else
        {
            user = dbContext.Users.Where(user => user.UserName == state.User.Identity.Name).First();
            Pages = dbContext.AccessList.Where(func => func.UserId == user.Id).Select(func => func.Page).ToList();
            IsAdmin = dbContext.UserRoles.Where(role => role.UserId == user.Id).Count() > 0;
            UserId = user.Id;
            IsLoggedIn = true;
            if(IsAdmin)
                Accounts = dbContext.Accounts.ToList();
            else
            {
                if(user.Access != null)
                {
                    string[] parts = user.Access.Split(':');
                    List<int> borrowerCodes = new List<int>();
                    foreach(string part in parts)
                    {
                        borrowerCodes.Add(int.Parse(part));
                    }
                    Accounts = dbContext.Accounts.Where(f => borrowerCodes.Contains(f.BorrowerCode)).ToList();
                }
            }
            FilteredAccounts = Accounts;
        }
        base.OnInitialized();
    }

    /// <summary>
    /// Fires when the nav bar collapse button is clicked.
    /// Changes the state of the nav bar
    /// </summary>
    public void NavBarCollapseBtnClicked()
    {
        //Toggling the nav bar
        IsCollapsed = !IsCollapsed;
    }

    private void OnAccountChange(object account)
    {
        if (account is int borrowerCode)
        {
            _applicationState.BorrowerCode = borrowerCode;
            _Account = Accounts.Where(f => f.BorrowerCode == borrowerCode).First();
            navigationManager.NavigateTo(navigationManager.Uri, true);
        }
    }

    void LoadAccountData(LoadDataArgs args)
    {
        var query = Accounts.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.Company.ToLower().Contains(args.Filter.ToLower()));
        }

        FilteredAccounts = query.ToList();

        InvokeAsync(StateHasChanged);
    }

}