@page "/memomaster"
@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using Company_Site.Pages.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.WebUtilities
@inject ApplicationDbContext dbContext
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navManager

<PageTitle> Memo Master </PageTitle>

<AuthorizeView>

	<Authorized>

		<div>
			<div class="row">

				<div class="mb-3 col-2 btn-list">

					<p class="fw-bold text-button-heading mb-2">Memo List</p>

					<div class="mx-1">
						<a @onclick="@(() => MemoStatusSelectionChanged(MemoMasterOption.Draft))" class="@(SelectedOption == MemoMasterOption.Draft ? "btn-selected" : "")">Draft</a>
					</div>

					<div class="mx-1">
						<a @onclick="@(() => MemoStatusSelectionChanged(MemoMasterOption.Pending))" class="@(SelectedOption == MemoMasterOption.Pending ? "btn-selected" : "")">Pending</a>
					</div>

					<div class="mx-1">
						<a @onclick="@(() => MemoStatusSelectionChanged(MemoMasterOption.Approved))" class="@(SelectedOption == MemoMasterOption.Approved ? "btn-selected" : "")">Approved</a>
					</div>

					<div class="mx-1">
						<a @onclick="@(() => MemoStatusSelectionChanged(MemoMasterOption.Rejected))" class="@(SelectedOption == MemoMasterOption.Rejected ? "btn-selected" : "")">Rejected</a>
					</div>

				</div>

				<div class="col-10 px-0">

					<div class="row mb-2">
						<div class="col-4">
							<p class="ms-2 fs-3 fw-bold mb-0">Memo Master</p>
						</div>
						<div class="d-flex justify-content-end align-items-center col-7">
							<a class="btn btn-primary" href="/memoeditor"><i class="me-1 fa fa-plus"></i>Add New Memo</a>
						</div>
					</div>

					<Table T="Memo" T2="string" Items="@DisplayedMemos" IsViewable="IsViewable" ViewItem="ViewItem" GetId="GetId" Headers="@Headers" GetTableRows="@GetTableRows" OnEdit="Edit" IsEditable="IsEditable" IsDeleteable="(Memo m) => false" OnSearch="Search" ShowSerialNumber="true"></Table>

				</div>

			</div>
		</div>

	</Authorized>

	<NotAuthorized>
		<LoginRedirect ReturnUrl="/memomaster"/>
	</NotAuthorized>

</AuthorizeView>

@code {

	[CascadingParameter(Name = "UserId")]
	public int? UserId { get; set; }

	private MemoMasterOption SelectedOption { get; set; } = MemoMasterOption.Draft;

	public List<Memo> DisplayedMemos { get; set; }

	public Dictionary<string, Func<Memo, dynamic>> Headers { get; set; } = new Dictionary<string, Func<Memo, dynamic>>
	{
		["Memo Number"] = (Memo memo) => memo.MemoNumber,
		["Case Name"] = (Memo memo) => memo.CaseName,
		["Subject"] = (Memo memo) => memo.Subject,
		["Type"] = (Memo memo) => memo.Type,
		["Department"] = (Memo memo) => memo.Department,
		["Vendor"] = (Memo memo) => memo.Vendor,
		["Amount"] = (Memo memo) => memo.Amount,
		["Status"] = (Memo memo) => memo.MemoStatus,
	};

	protected override void OnInitialized()
	{
		base.OnInitialized();
		DisplayedMemos = dbContext.Memos.Where(memo => memo.IsDraft).ToList();
	}

	private void MemoStatusSelectionChanged(MemoMasterOption option)
	{
		SelectedOption = option;

		if (option == MemoMasterOption.Draft)
			DisplayedMemos = dbContext.Memos.Where(memo => memo.IsDraft && memo.WriterId == UserId).ToList();
		else if (option == MemoMasterOption.Pending)
			DisplayedMemos = dbContext.Memos.Where(memo => !memo.IsDraft && memo.MemoStatus == MemoStatus.Pending).ToList();
		else if (option == MemoMasterOption.Approved)
			DisplayedMemos = dbContext.Memos.Where(memo => !memo.IsDraft && memo.MemoStatus == MemoStatus.Approved).ToList();
		else
			DisplayedMemos = dbContext.Memos.Where(memo => !memo.IsDraft && memo.MemoStatus == MemoStatus.Rejected).ToList();
	}

	private string GetId(Memo m){
		return m.MemoNumber;
	}

	private List<string> GetTableRows(Memo m){
		string users = "";
		if(m.MemoStatus == MemoStatus.Pending){
			List<int> ids = dbContext.MemoReferences.Where(f => f.MemoId == m.MemoNumber)
			.Select(f => f.UserId).Distinct().ToList();
			List<string> pendingUsers = dbContext.Users.Where(u => ids.Contains(u.Id)).Select(u => $"{u.FirstName} {u.LastName}").ToList();
			for (int i = 0; i < pendingUsers.Count; i++)
			{
				users += $"{pendingUsers[i]}{((i == pendingUsers.Count - 1) ? "" : ",")}";
			}
		}

		List<string> row = new List<string>()
		{
			m.MemoNumber,
			m.CaseName,
			m.Subject,
			m.Type,
			m.Department,
			m.Vendor,
			m.Amount.ToString(),
			(m.MemoStatus == MemoStatus.Pending ? $"{m.MemoStatus} ({users})" : m.MemoStatus.ToString())
		};
		return row;
	}

	//private List<Memo> SortRecords(List<Memo> memos, string name, Sorting sorting){

	//	switch(name){
	//		case "Memo Number":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.MemoNumber).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.MemoNumber).ToList();
	//		case "Case Number":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.CaseName).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.CaseName).ToList();
	//		case "Subject":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.Subject).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.Subject).ToList();
	//		case "Type":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.Type).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.Type).ToList();
	//		case "Department":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.Department).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.Department).ToList();
	//		case "Vendor":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.Vendor).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.Vendor).ToList();
	//		case "Amount":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.Amount).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.Amount).ToList();
	//		case "Status":
	//			if (sorting == Sorting.Ascending)
	//				return memos.OrderBy(m => m.MemoStatus).ToList();
	//			else
	//				return memos.OrderByDescending(m => m.MemoStatus).ToList();
	//		default:
	//			return memos;
	//	}

	//}

	private List<Memo> Search(List<Memo> memos, string text){
		text = text.ToLower();
		return memos.Where(m => m.MemoNumber.ToLower().Contains(text)).ToList();
	}

	private bool IsEditable(Memo m){
		if (m.IsDraft && UserId == m.WriterId)
		{
			return true;
		}
		else
			return false;
	}

	private void Edit(string str){
		navManager.NavigateTo(QueryHelpers.AddQueryString("/memoeditor", "id", str));
	}

	//Tells whether the memo will be viewable or not
	private bool IsViewable(Memo m)
	{
		if (m.IsDraft)
			return false;

		if (m.MemoStatus != MemoStatus.Pending && m.WriterId == UserId)
			return true;

		List<UserMemoReference> Froms = dbContext.MemoReferences.Where(memo => memo.MemoId == m.MemoNumber && memo.Id == m.FromId).ToList();
		if (Froms.Any(f => f.MemoStatus == MemoStatus.Pending))
		{
			if (m.MemoStatus == MemoStatus.Pending && Froms.Where(f => f.UserId == UserId && f.MemoStatus == MemoStatus.Pending).Any())
				return true;
			else
				return false;
		}

		List<UserMemoReference> Throughs = dbContext.MemoReferences.Where(memo => memo.MemoId == m.MemoNumber && memo.Id == m.ThroughId).ToList();
		if (Throughs.Any(f => f.MemoStatus == MemoStatus.Pending))
		{
			if (m.MemoStatus == MemoStatus.Pending && Throughs.Where(f => f.UserId == UserId && f.MemoStatus == MemoStatus.Pending).Any())
				return true;
			else
				return false;
		}

		List<UserMemoReference> Tos = dbContext.MemoReferences.Where(memo => memo.MemoId == m.MemoNumber && memo.Id == m.ToId).ToList();
		if (Tos.Any(f => f.MemoStatus == MemoStatus.Pending))
		{
			if (m.MemoStatus == MemoStatus.Pending && Tos.Where(f => f.UserId == UserId && f.MemoStatus == MemoStatus.Pending).Any())
				return true;
			else
				return false;
		}

		return false;
	}

	//Displays the memo 
	private void ViewItem(string memoNumber)
	{
		navManager.NavigateTo(QueryHelpers.AddQueryString("/memoview", "memoNumber", memoNumber));
	}
}
