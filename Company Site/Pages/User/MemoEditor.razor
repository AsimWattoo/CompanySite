@page "/memoeditor"
@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using Company_Site.Helpers
@using Company_Site.Pages.Components
@using Company_Site.ViewModels
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Radzen.Blazor
@using Radzen;
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Memo Editor</PageTitle>

<AuthorizeView>

	<Authorized >

		<div class="px-lg-5">
			<EditForm Model="NewMemo" Context="childContext" OnValidSubmit="AddMemo">

				<DataAnnotationsValidator/>
				<ValidationSummary/>
				<ErrorView Error="@Error"/>


				<h4>Memo Information</h4>

				<fieldset class="card border-0">

					<legend class="">Memo Details</legend>

					<div class="row">
						<div class="col-6 d-flex align-items-center">
							<div class="form-floating mb-3 mx-1 w-100">
								<RadzenDropDown class="ms-1 form-select" 
									AllowFiltering="true" 
									TValue="int" 
									Value=NewMemo.BorrowerCode 
									Data="Accounts" 
									TextProperty="Company" 
									ValueProperty="BorrowerCode"
									id="borrower"
									Change="OnBorrowerAccountChanged"/>
								<label for="borrower">Select Borrower: </label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1 w-100">
								<label id="borrowerCode" class="form-control empty-label disabled">@NewMemo.BorrowerCode</label>
								<label for="borrowerCode">Borrower Code: </label>
							</div>
						</div>
					</div>

					<div class="row">
						<div class="col-6 d-flex align-items-center">
							<div class="form-floating mb-3 mx-1 w-100">
								<RadzenDropDown class="ms-1 form-select" 
									AllowFiltering="true" 
									TValue="int" 
									Value=NewMemo.TrustCode 
									Data="Trusts" 
									TextProperty="Trust_Name" 
									ValueProperty="TrustCode"
									id="trust"
									Change="OnTrustCodeChanged"/>
								<label for="trust">Select Trust: </label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1 w-100">
								<label id="trustCode" class="form-control empty-label disabled">@NewMemo.TrustCode</label>
								<label for="trustCode">Trust Code: </label>
							</div>
						</div>
					</div>

					<div class="row">
						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
								<InputText type="text" class="form-control" id="department" placeholder="Department" Value="@NewMemo.Department" ValueChanged="DepartmentChanged" ValueExpression="() => NewMemo.Department"/>
								<label for="department">Department</label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <InputText type="text" class="form-control" id="memono" placeholder="Meemo No" @bind-Value="NewMemo.MemoNumber"/>
							  <label for="memono">Memo No</label>
							</div>

						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <InputText type="text" class="form-control" id="branch" placeholder="Branch" @bind-Value="NewMemo.Branch"/>
							  <label for="branch">Branch</label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <InputDate class="form-control" id="date" placeholder="Date" Value="@NewMemo.Date" ValueChanged="((Action<DateTime>)DateChanged)" ValueExpression="() => NewMemo.Date"/>
							  <label for="date">Date</label>
							</div>
						</div>
					</div>

					<div class="row">
						<div class="col-6">
							<div class="form-floating mb-3 d-flex align-items-center">
								<InputSelect TValue=string Value=NewMemo.Type ValueExpression="@(() => NewMemo.Type)"
									ValueChanged="@MemoTypeChanged" id="type" class="form-select">
									<option selected>--- Select Type ---</option>
									<option value="bill">Bill</option>
									<option value="note">Note</option>
									<option value="caseUpdate">Case Update</option>
									<option value="empanelment">Empanelment</option>
									<option value="trustClose">Trust Close</option>
									<option value="accountClose">Account Close</option>
									<option value="resolutionStrategy">Resolution Strategy</option>
									<option value="approval">Approval</option>
								</InputSelect>
								<label for="type" class="me-1">Type</label>
							</div>
						</div>
					</div>

				</fieldset>

				<fieldset class="my-2 card border-0">

					<legend class="">Financial</legend>

					<div class="row">
						<div class="col-6">
							<div class="form-floating mb-3 d-flex align-items-center">
								<InputSelect @bind-Value="NewMemo.Frequency" disabled="@(!NewMemo.Financial)" id="frequency" class="form-select">
									<option selected>--- Select Frequency ---</option>
									<option>OneTime</option>
									<option>Monthly</option>
									<option>Quaterly</option>
									<option>Anually</option>
								</InputSelect>
								<label for="frequency" class="me-1">Frequency</label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 d-flex align-items-center">
								<RadzenDropDown class="ms-1 form-select" 
									AllowFiltering="true" 
									TValue="int" 
									Value=NewMemo.VendorId 
									Data="vendors" 
									TextProperty="AccountNumber" 
									ValueProperty="Id"
									Change="OnVendorChanged"
									id="vendor"/>
								<label for="vendor" class="me-1">Vendor</label>
							</div>
						</div>
						<div class="col-6">
							<div class="form-floating mb-3 d-flex align-items-center">
								<label class="form-control empty-label disabled" disabled id="memoamount">@NewMemo.GSTNumber</label>
								<label for="memoamount">GST Number</label>
							</div>
						</div>

						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <input type="number" min="0" class="form-control" disabled="@(!NewMemo.Financial)" id="memoamount" placeholder="Total Memo Amount" @bind-value="@NewMemo.Amount"/>
							  <label for="memoamount">Total Memo Amount</label>
							</div>
						</div>

						<div class="col-6">
							<div class="form-floating mb-3 d-flex align-items-center">
								<InputSelect @bind-Value="NewMemo.Periodicity"  id="periodicity" class="form-select">
									<option selected>--- Select Periodicity ---</option>
									<option>Daily</option>
									<option>Weekly</option>
									<option>Monthly</option>
								</InputSelect>
								<label for="periodicity" class="me-1">Periodicity</label>
							</div>

						</div>
						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <input type="date" class="form-control" id="validTill" placeholder="Valid Till" @bind-value="NewMemo.ValidTill"/>
							  <label for="validTill">Valid Till</label>
							</div>
						</div>

						<div class="col-6">
							<div class="form-floating mb-3 mx-1">
							  <InputText type="text" class="form-control" id="service" placeholder="Case Name" @bind-Value="NewMemo.Service"/>
							  <label for="service">Service</label>
							</div>
						</div>
					</div>

				</fieldset>

				<fieldset class="card border-0">

					<legend class="">Approval Authority</legend>

					<div class="row">
						<div class="col-12">
							<div class="row mb-3 d-flex align-items-center">
								<div class="col-2">
									<label class="me-1">Memo To:</label>
								</div>
								<div class="col">
									<RadzenDropDown Multiple="true" 
										Chips="true" 
										AllowClear="true" 
										AllowFiltering="true" 
										FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
										@bind-Value=@NewMemo.To
										Data=@Users 
										TextProperty="UserName" 
										ValueProperty="Id" 
										class="w-100" />
								</div>
							</div>
						</div>
						<div class="col-12">
							<div class="input-group mb-3 d-flex align-items-center">
								<div class="col-2">
									<label class="me-1">Memo Through:</label>
								</div>
								<div class="col">
									<RadzenDropDown Multiple="true" 
										Chips="true" 
										AllowClear="true" 
										AllowFiltering="true" 
										FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
										@bind-Value=@NewMemo.Through
										Data=@Users 
										TextProperty="UserName" 
										ValueProperty="Id" 
										class="w-100" />
								</div>
							</div>
						</div>
						<div class="col-12">
							<div class="row mb-3">
								<div class="col-2">
									<label class="me-1">Memo From:</label>
								</div>
								<div class="col">
									<RadzenDropDown Multiple="true" 
										Chips="true" 
										AllowClear="true" 
										AllowFiltering="true" 
										FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
										@bind-Value=@NewMemo.From
										Data=@Users 
										TextProperty="UserName" 
										ValueProperty="Id" 
										class="w-100" />
								</div>
							</div>
						</div>
					</div>
				</fieldset>

				<fieldset class="card border-0">

					<legend class="">Enter Content</legend>

					<div class="row">
						<div class="col-12">

							<div class="form-floating my-3 mx-1">
								<InputText type="text" class="form-control" id="subject" placeholder="Subject" @bind-Value="NewMemo.Subject"/>
								<label for="subject">Subject</label>
							</div>
						</div>
					</div>

					<div class="row">
						<div class="col-12">
							<RichTextEditor @bind-Value="NewMemo.Text" class="m-0"/>
						</div>
						<div class="col-12 mt-5">
							<div class="input-group mb-3 d-flex align-items-center">
								<InputFile id="files" @bind-Value="@NewMemo.Files" class="form-control" OnChange="FilesChanged" multiple/>
							</div>
							<div class="row px-2">
								@foreach(IBrowserFile file in NewMemo.Files){
									<div class="col-1 m-2 p-2 file-box">
										<div class="position-relative">
											<a class="rounded-pill cancel-btn" @onclick="@(() => RemoveFile(file))">X</a>
										</div>
										<div class="d-flex justify-content-center">
											@if(file.ContentType == "image/png" || file.ContentType == "image/jpg")
											{
												<img src="/img/img.png" class="w-75 h-75 mt-2"/>
											}
											else if(file.ContentType == "application/pdf")
											{
												<img src="/img/pdf.png" class="w-75 h-75 mt-2"/>
											}
											else
											{
												<img src="/img/word.png" class="w-75 h-75 mt-2"/>
											}
										</div>
										<p class="m-0 text-center">@file.Name</p>
									</div>
								}
							</div>
						</div>
					</div>

				</fieldset>

				<fieldset class="card border-0">
					<div class="py-2">
						<div class="input-group d-flex justify-content-center">
							@if (PageMode == PageMode.Add)
							{
								<div>
									<a class="btn btn-outline-primary" @onclick="SaveDraft">Save as draft</a>
									<input type="submit" value="Send" class="btn btn-outline-success ms-1"/>
								</div>
							}
							else
							{
								<div>
									<a class="btn btn-outline-danger" @onclick="Discard">Discard</a>
									<a class="btn btn-outline-primary" @onclick="SaveDraft">Save as draft</a>
									<input type="submit" value="Send" class="btn btn-outline-success ms-1"/>
								</div>
							}
						</div>
					</div>
				</fieldset>

			</EditForm>
		</div>

	</Authorized>

	<NotAuthorized>
		<LoginRedirect ReturnUrl="/memoeditor" />
	</NotAuthorized>

</AuthorizeView>

@code {

	[CascadingParameter(Name = "UserId")]
	public string UserId { get; set; }

	//The error which is being displayed
	private string Error { get; set; }

	private MemoViewModel NewMemo { get; set; } = new MemoViewModel();

	private List<User> Users { get; set; } = new List<User>();

	private List<Vendor> vendors { get; set; } = new List<Vendor>();

	private int MemoNumber = 1;

	private Company_Site.Data.User CurrentUser;

	public string id{ get; set; }

	/// <summary>
	/// The list of accounts
	/// </summary>
	private List<Account> Accounts { get; set; } = new List<Account>();

	/// <summary>
	/// The list of trusts for the selected borrower account
	/// </summary>
	private List<Trust> Trusts { get; set; } = new List<Trust>();

	private PageMode PageMode = PageMode.Add;

	private const long MAX_FILE_SIZE = 1024000 * 5;

	private List<Vendor> Vendors { get; set; } = new List<Vendor>();

	private List<int> Tos { get; set; } = new List<int>();

	/// <summary>
	/// Fires when the memo type changes
	/// </summary>
	/// <param name="memoType"></param>
	private void MemoTypeChanged(object memoType){
		NewMemo.Type = memoType.ToString();
		if(NewMemo.Type == "bill")
			NewMemo.Financial = true;
		else
			NewMemo.Financial = false;
	}

	private void OnBorrowerAccountChanged(object account)
	{
		if (account is int borrowerCode)
		{
			NewMemo.BorrowerCode = borrowerCode;
			List<string> trustIds = dbContext.TrustRelations
				.Where(f => f.BorrowerCode == borrowerCode)
				.Select(f => f.TrustCode)
				.Distinct()
				.ToList();
			Trusts = dbContext.Trusts.Where(f => trustIds.Contains(f.TrustCode)).ToList();
		}
	}

	private void OnVendorChanged(object vendor)
	{
		if (vendor is int vendorId)
		{
			NewMemo.VendorId = vendorId;
			Vendor v = dbContext.Vendors.Where(f => f.Id == vendorId).First();
			NewMemo.Vendor = v.VendorName;
			NewMemo.GSTNumber = v.GSTNumber;
			StateHasChanged();
		}
	}

	/// <summary>
	/// Fires when the trust code changes
	/// </summary>
	/// <param name="trustCode">The new trust code</param>
	private void OnTrustCodeChanged(object trustCode)
	{
		if(trustCode is string trust)
		{
			NewMemo.TrustCode = trust;
		}
	}

	//Files change
	private void FilesChanged(InputFileChangeEventArgs e){
		if (e.GetMultipleFiles().Any(f => f.Size > MAX_FILE_SIZE))
			Error = "Files of max size 5MB are allowed";
		NewMemo.Files = e.GetMultipleFiles().ToList();
	}

	protected override async void OnInitialized()
	{
		base.OnInitialized();

		if (UserId == null)
			return;
		vendors = dbContext.Vendors.ToList();
		Accounts = dbContext.Accounts.ToList();
		string[] param = navManager.Uri.Split("?");
		if(param.Count() > 1){
			Dictionary<string, StringValues> parameters = QueryHelpers.ParseQuery(param[1]);
			StringValues idValue;
			bool res = parameters.TryGetValue("id", out idValue);
			if (res)
				id = idValue;
		}

		if (id != null)
			PageMode = PageMode.Edit;

		Users = dbContext.Users.ToList();
		Vendors = dbContext.Vendors.ToList();

		if(PageMode == PageMode.Add){
			if (dbContext.Memos.Any())
				MemoNumber = int.Parse(dbContext.Memos.OrderBy(o => o.MemoNumber).Last().MemoNumber.Split('/').Last()) + 1;
		}
		else{
			//Getting the Memo and Loading in the view model
			Memo memo = dbContext.Memos.Where(m => m.MemoNumber == id).First();
			NewMemo = new MemoViewModel()
			{
				Amount = memo.Amount,
				Branch = memo.Branch,
				Service = memo.Service,
				Date = memo.Date,
				Department = memo.Department,
				MemoNumber = memo.MemoNumber,
				Financial = memo.Financial,
				Frequency = memo.Frequency,
				IsDraft = memo.IsDraft,
				MemoStatus = memo.MemoStatus,
				Subject = memo.Subject,
				Vendor = memo.Vendor,
				ValidTill = memo.ValidTill,
				Text = memo.Text,
				Periodicity = memo.Periodicity,
				Type = memo.Type,
				BorrowerCode = memo.BorrowerCode,
				TrustCode = memo.TrustCode,
				GSTNumber = memo.GSTNumber,
				VendorId = memo.VendorId
			};
			List<string> fromIds = dbContext.MemoReferences.Where(m => m.Id == memo.FromId && m.MemoId == memo.MemoNumber).Select(m => m.UserId).ToList();
			List<string> throughIds = dbContext.MemoReferences.Where(m => m.Id == memo.ThroughId && m.MemoId == memo.MemoNumber).Select(m => m.UserId).ToList();
			List<string> toIds = dbContext.MemoReferences.Where(m => m.Id == memo.ToId && m.MemoId == memo.MemoNumber).Select(m => m.UserId).ToList();
			List<string> files = dbContext.Files.Where(m => m.MemoId == NewMemo.MemoNumber).Select(f => f.Path).ToList();


			NewMemo.From = fromIds;
			NewMemo.Through = throughIds;
			NewMemo.To = toIds;
			NewMemo.Files = GetFiles(files);
			List<string> trustIds = dbContext.TrustRelations
				.Where(f => f.BorrowerCode == NewMemo.BorrowerCode)
				.Select(f => f.TrustCode)
				.Distinct()
				.ToList();
			Trusts = dbContext.Trusts.Where(f => trustIds.Contains(f.TrustCode)).ToList();
		}

		AuthenticationState state = await authStateProvider.GetAuthenticationStateAsync();

		if(state.User.Identity.IsAuthenticated){
			CurrentUser = dbContext.Users.Where(user => user.UserName == state.User.Identity.Name).First();
		}

		NewMemo.Department = CurrentUser.Department;
		UpdateMemoNumber();

		StateHasChanged();
	}

	//Updates the memo number
	private void UpdateMemoNumber(){
		string memoNumber = "";
		if (!string.IsNullOrEmpty(NewMemo.Department))
			memoNumber = $"{NewMemo.Department}";
		if (!string.IsNullOrEmpty(CurrentUser.FirstName))
			memoNumber += $"/{CurrentUser.FirstName}";
		if (!string.IsNullOrEmpty(CurrentUser.LastName))
			memoNumber += $"{CurrentUser.LastName.First()}";
		string temp = "";
		while(true){
			temp = $"{memoNumber}/{NewMemo.Date.ToString("yy")}/{MemoNumber}";
			if (dbContext.Memos.Where(f => f.MemoNumber == temp).Any())
				MemoNumber++;
			else
				break;
		}
		NewMemo.MemoNumber = temp; ;

	}

	private void DepartmentChanged(string department){
		NewMemo.Department = department;
		UpdateMemoNumber();
	}

	private void DateChanged(DateTime date){
		NewMemo.Date = date;
		UpdateMemoNumber();
	}

	private async void SaveDraft(){
		//string text = await textEditor.GetHTML();
		Memo memo = new Memo()
			{
				WriterId = UserId,
				Amount = NewMemo.Amount,
				Branch = NewMemo.Branch,
				Service = NewMemo.Service,
				Date = NewMemo.Date,
				Department = NewMemo.Department,
				Financial = NewMemo.Financial,
				Frequency = NewMemo.Frequency,
				IsDraft = true,
				MemoNumber = NewMemo.MemoNumber,
				MemoStatus = Company_Site.Enum.MemoStatus.Pending,
				Periodicity = NewMemo.Periodicity,
				Subject = NewMemo.Subject,
				Text = NewMemo.Text,
				Type = NewMemo.Type,
				Vendor = NewMemo.Vendor,
				ValidTill = NewMemo.ValidTill,
				BorrowerCode = NewMemo.BorrowerCode,
				TrustCode = NewMemo.TrustCode,
				GSTNumber = NewMemo.GSTNumber,
				VendorId = NewMemo.VendorId
			};

		dbContext.MemoReferences.RemoveRange(dbContext.MemoReferences.Where(f => f.MemoId == this.id));
		dbContext.Files.RemoveRange(dbContext.Files.Where(f => f.MemoId == this.id));

		int id = 1;
		if(dbContext.MemoReferences.Any())
			id = dbContext.MemoReferences.OrderBy(o => o.MemoId).Last().Id + 1;

		foreach(string userId in NewMemo.From){
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.FromId = id;
		id++;
		foreach (string userId in NewMemo.Through)
		{
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.ThroughId = id;
		id++;
		foreach (string userId in NewMemo.To)
		{
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.ToId = id;
		List<string> files = await SaveFiles(NewMemo.Files);
		int fileId = 1;
		if (dbContext.Files.Any())
			fileId = dbContext.Files.OrderBy(f => f.FileId).Last().FileId + 1;
		dbContext.Files.AddRange(files.Select(f => new File() { FileId = fileId++, Path = f, MemoId = memo.MemoNumber}));

		if(PageMode == PageMode.Add){
			if(dbContext.Memos.Where(f => f.MemoNumber == NewMemo.MemoNumber).Count() != 0)
			{
				Error = "Memo with the number already exists";
				return;
			}
			dbContext.Memos.Add(memo);
		}
		else
		{
			if (dbContext.Memos.Where(f => f.MemoNumber == NewMemo.MemoNumber).Count() != 0)
			{
				Memo foundMemo = dbContext.Memos.Where(m => m.MemoNumber == this.id).First();
				foundMemo.FromMemoViewModel(NewMemo);
				foundMemo.Text = NewMemo.Text;
			}
			else{
				dbContext.Memos.Remove(dbContext.Memos.Where(f => f.MemoNumber == this.id).First());
				dbContext.Memos.Add(memo);
			}
		}
		dbContext.SaveChanges();
		navManager.NavigateTo("/memomaster");
	}

	private async void AddMemo(){
		Memo memo = new Memo()
			{
				WriterId = UserId,
				Amount = NewMemo.Amount,
				Branch = NewMemo.Branch,
				Service = NewMemo.Service,
				Date = NewMemo.Date,
				Department = NewMemo.Department,
				Financial = NewMemo.Financial,
				Frequency = NewMemo.Frequency,
				IsDraft = false,
				MemoNumber = NewMemo.MemoNumber,
				MemoStatus = Company_Site.Enum.MemoStatus.Pending,
				Periodicity = NewMemo.Periodicity,
				Subject = NewMemo.Subject,
				Text = NewMemo.Text,
				Type = NewMemo.Type,
				Vendor = NewMemo.Vendor,
				ValidTill = NewMemo.ValidTill,
				BorrowerCode = NewMemo.BorrowerCode,
				TrustCode = NewMemo.TrustCode,
				GSTNumber = NewMemo.GSTNumber,
				VendorId = NewMemo.VendorId
			};

		dbContext.MemoReferences.RemoveRange(dbContext.MemoReferences.Where(f => f.MemoId == this.id));
		dbContext.Files.RemoveRange(dbContext.Files.Where(f => f.MemoId == this.id));

		int id = 1;
		if(dbContext.MemoReferences.Any())
			id = dbContext.MemoReferences.OrderBy(o => o.MemoId).Last().Id + 1;

		foreach(string userId in NewMemo.From){
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.FromId = id;
		id++;
		foreach (string userId in NewMemo.Through)
		{
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.ThroughId = id;
		id++;
		foreach (string userId in NewMemo.To)
		{
			dbContext.MemoReferences.Add(new UserMemoReference() { Id = id, MemoId = NewMemo.MemoNumber, UserId = userId, MemoStatus = MemoStatus.Pending });
		}
		memo.ToId = id;

		memo.ToId = id;
		List<string> files = await SaveFiles(NewMemo.Files);
		int fileId = 1;
		if (dbContext.Files.Any())
			fileId = dbContext.Files.OrderBy(f => f.FileId).Last().FileId + 1;
		dbContext.Files.AddRange(files.Select(f => new File() { FileId = fileId++, Path = f, MemoId = memo.MemoNumber }));

		if (PageMode == PageMode.Add)
		{
			if (dbContext.Memos.Where(f => f.MemoNumber == NewMemo.MemoNumber).Count() != 0)
			{
				Error = "Memo with the number already exists";
				return;
			}
			dbContext.Memos.Add(memo);
		}
		else
		{
			if (dbContext.Memos.Where(f => f.MemoNumber == NewMemo.MemoNumber).Count() != 0)
			{
				Memo foundMemo = dbContext.Memos.Where(m => m.MemoNumber == this.id).First();
				foundMemo.FromMemoViewModel(NewMemo);
				foundMemo.IsDraft = false;
			}
			else
			{
				dbContext.Memos.Remove(dbContext.Memos.Where(f => f.MemoNumber == this.id).First());
				dbContext.Memos.Add(memo);
			}
		}
		dbContext.SaveChanges();
		navManager.NavigateTo("/memomaster");
	}

	private void Discard(){
		Memo m = dbContext.Memos.Where(m => m.MemoNumber == id).First();
		dbContext.MemoReferences.RemoveRange(dbContext.MemoReferences.Where(func => func.MemoId == m.MemoNumber));
		dbContext.Memos.Remove(m);
		dbContext.SaveChanges();
		navManager.NavigateTo("/memomaster");
	}

	//Uploads and saves files
	private async Task<List<string>> SaveFiles(List<IBrowserFile> files){
		List<string> filePaths = new List<string>();
		foreach(IBrowserFile file in files){
			Stream stream = file.OpenReadStream(maxAllowedSize: MAX_FILE_SIZE);
			string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "files", file.Name);
			filePaths.Add(filePath);
			using(FileStream fileStream = new FileStream(filePath, FileMode.Create)){
				byte[] data = new byte[stream.Length];
				await stream.ReadAsync(data, 0, data.Length);
				await fileStream.WriteAsync(data, 0, data.Length);
			}
		}
		return filePaths;
	}

	private List<IBrowserFile> GetFiles(List<string> files){
		List<IBrowserFile> loadedFiles = new List<IBrowserFile>();
		foreach(string file in files){
			IBrowserFile f = new UploadedFile(file);
			loadedFiles.Add(f);
		}
		return loadedFiles; 
	}

	private void RemoveFile(IBrowserFile file){
		NewMemo.Files.Remove(file);
	}
}
