@page "/memoview"
@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using Company_Site.Helpers
@using Company_Site.Pages.Components
@using Company_Site.ViewModels
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@inject NavigationManager navManager
@inject ApplicationDbContext dbContext;


<AuthorizeView>

	<Authorized>

		<h3>Memo View</h3>

		<fieldset>

			<legend>Personal Information</legend>

			<div class="row">
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Department:</p>
						<p class="d-inline-block">@Memo.Department</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Memo Number:</p>
						<p class="d-inline-block">@Memo.MemoNumber</p>
					</div>

				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Branch:</p>
						<p class="d-inline-block">@Memo.Branch</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Date:</p>
						<p class="d-inline-block">@Memo.Date.ToShortDateString()</p>
					</div>
				</div>
			</div>

		</fieldset>

		<fieldset>

			<legend>Financial Information</legend>

			<div class="row">
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Total Memo Amount:</p>
						<p class="d-inline-block">@(Memo.Financial ? Memo.Amount : "N/A" )</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Periodicity:</p>
						<p class="d-inline-block">@Memo.Periodicity</p>
					</div>

				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Valid Till:</p>
						<p class="d-inline-block">@Memo.ValidTill.ToShortDateString()</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Case Name:</p>
						<p class="d-inline-block">@Memo.CaseName</p>
					</div>
				</div>
			</div>

		</fieldset>

		<fieldset>

			<div class="row">
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Financial:</p>
						<p class="d-inline-block">@(Memo.Financial ? "Yes" : "No")</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Type:</p>
						<p class="d-inline-block">@Memo.Type</p>
					</div>

				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Frequency: </p>
						<p class="d-inline-block">@(Memo.Financial ? Memo.Frequency : "N/A")</p>
					</div>
				</div>
				@if(IsWriter){
					<div class="col-6">
						<div class="form-floating mb-3 mx-1">
							<p class="d-inline-block fw-bold me-1">Memo Status: </p>
							@if(Memo.MemoStatus == MemoStatus.Pending){
								<p class="d-inline-block bg-pending px-2 py-1 rounded-pill">@Memo.MemoStatus</p>
							}
							else if(Memo.MemoStatus == MemoStatus.Approved){
								<p class="d-inline-block bg-success text-light px-2 py-1 rounded-pill">@Memo.MemoStatus</p>
							}
							else
							{
								<p class="d-inline-block bg-danger text-light px-2 py-1 rounded-pill">@Memo.MemoStatus</p>
							}
						</div>
					</div>
				}
			</div>

		</fieldset>

		<fieldset>

			<legend>Approval Authority</legend>

			<div class="row">
				<div class="col-12">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold me-1">Memo To: </p>
						@foreach(string user in Memo.To)
						{
							<p class="d-inline-block me-1">@user,</p>
						}
					</div>
				</div>
				<div class="col-12">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold me-1">Memo Through: </p>
						@foreach (string user in Memo.Through)
						{
								<p class="d-inline-block me-1">@user,</p>
						}
					</div>

				</div>
				<div class="col-12">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold me-1">Memo From: </p>
						@foreach (string user in Memo.From)
						{
								<p class="d-inline-block me-1">@user,</p>
						}
					</div>
				</div>
			</div>

		</fieldset>

		<fieldset>

			<legend>Subject</legend>

			<div class="row">
				<div class="col-12">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Subject:</p>
						<p class="d-inline-block">@Memo.Subject</p>
					</div>
				</div>
				<div class="col-6">
					<div class="form-floating mb-3 mx-1">
						<p class="d-inline-block fw-bold">Vendor:</p>
						<p class="d-inline-block">@Memo.Vendor</p>
					</div>

				</div>
			</div>

		</fieldset>

		<fieldset>

			<legend>Memo Description or Attach Word File</legend>

			<div class="row">
				<div class="col-12 pb-3">
					@((MarkupString)Memo.Text)
				</div>

				<div class="col-12 @(Memo.Files.Count > 0 ? "mt-5" : "")">

					<div class="row px-2">

						@foreach (IBrowserFile file in Memo.Files)
						{
							<div class="col-md-2 col-3 m-2 p-2 file-box">
								<div class="d-flex justify-content-center">
									@if (file.ContentType == "image/png" || file.ContentType == "image/jpg")
									{
										<img src="/img/img.png" class="w-75 h-75 mt-2"/>
									}
									else if (file.ContentType == "application/pdf")
									{
										<img src="/img/pdf.png" class="w-75 h-75 mt-2"/>
									}
									else
									{
										<img src="/img/word.png" class="w-75 h-75 mt-2"/>
									}
								</div>
								<p class="m-0 text-center">@file.Name</p>
							</div>
						}

					</div>

				</div>

			</div>

		</fieldset>

		<fieldset>

			@if(Memo.MemoStatus == MemoStatus.Pending){
				<div>
					<p class="mb-1">Comment: </p>
					<BlazoredTextEditor @ref="@commentEditor" Placeholder="Enter Comment">
						<ToolbarContent>
							<select class="ql-header">
								<option selected=""></option>
								<option value="1"></option>
								<option value="2"></option>
								<option value="3"></option>
								<option value="4"></option>
								<option value="5"></option>
							</select>
							<span class="ql-formats">
								<button class="ql-bold"></button>
								<button class="ql-italic"></button>
								<button class="ql-underline"></button>
								<button class="ql-strike"></button>
							</span>
							<span class="ql-formats">
								<select class="ql-color"></select>
								<select class="ql-background"></select>
							</span>
							<span class="ql-formats">
								<button class="ql-list" value="ordered"></button>
								<button class="ql-list" value="bullet"></button>
							</span>
							<span class="ql-formats">
								<button class="ql-link"></button>
							</span>
						</ToolbarContent>
					</BlazoredTextEditor>
				</div>
			}

			<div class="mt-3">

				<p class="mb-2 fw-bold">Comments:</p>

				@foreach(CommentViewModel vm in Memo.Comments)
				{
					@if(vm.ShowComment){
							<div class="comment-box my-2">
								<div class="mb-2">
									<p class="d-inline-block fw-bold">User: </p>
									<p class="d-inline-block">@vm.UserName</p>
								</div>
								<div>
								@((MarkupString)vm.CommentText)
								</div>
							</div>
					}
				}

			</div>

		</fieldset>

		@if(Memo.MemoStatus == MemoStatus.Pending){
			<div class="d-flex justify-content-center align-items-center mb-2">
				<div>
					<a class="btn btn-outline-success" @onclick="Accept">Accept</a>
					<a class="btn btn-outline-danger ms-1" @onclick="Reject">Reject</a>
				</div>
			</div>
		}

	</Authorized>

	<NotAuthorized>
		<LoginRedirect ReturnUrl="/memoview"/>
	</NotAuthorized>

</AuthorizeView>


@code {

	[CascadingParameter(Name = "UserId")]
	private int? UserId { get; set; }

	private BlazoredTextEditor commentEditor;

	/// <summary>
	/// Indicates whether this is the writer to memo viewing it or not
	/// </summary>
	private bool IsWriter { get; set; }

	public string memoNumber { get; set; } = string.Empty;

	/// <summary>
	/// The memo which is to be displayed
	/// </summary>
	private MemoViewModel Memo { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		string[] param = navManager.Uri.Split("?");
		if (param.Count() > 1)
		{
			Dictionary<string, StringValues> parameters = QueryHelpers.ParseQuery(param[1]);
			StringValues idValue;
			bool res = parameters.TryGetValue("memoNumber", out idValue);
			if (res)
				memoNumber = idValue;
		}

		if (!string.IsNullOrEmpty(memoNumber))
		{
			Memo memo = dbContext.Memos.Where(m => m.MemoNumber == memoNumber).First();
			Memo = memo.ToMemoViewModel();
			IsWriter = memo.WriterId == UserId;

			//Loading Users
			Dictionary<int, string> UsersMapping = dbContext.Users.ToDictionary(k => k.Id, v => $"{v.FirstName} {v.LastName}");
			List<UserMemoReference> Froms = dbContext.MemoReferences.Where(m => m.Id == memo.FromId && m.MemoId == memo.MemoNumber).ToList();
			List<UserMemoReference> Throughs = dbContext.MemoReferences.Where(m => m.Id == memo.ThroughId && m.MemoId == memo.MemoNumber).ToList();
			List<UserMemoReference> Tos = dbContext.MemoReferences.Where(m => m.Id == memo.ToId && m.MemoId == memo.MemoNumber).ToList();

			foreach (UserMemoReference reference in Froms)
				Memo.From.Add(UsersMapping[reference.UserId]);

			foreach (UserMemoReference reference in Throughs)
				Memo.Through.Add(UsersMapping[reference.UserId]);

			foreach (UserMemoReference reference in Tos)
				Memo.To.Add(UsersMapping[reference.UserId]);
			//Getting files
			List<string> files = dbContext.Files.Where(f => f.MemoId == memo.MemoNumber).Select(f => f.Path).ToList();
			foreach(string file in files)
				Memo.Files.Add(new UploadedFile(file));

			//Getting Comments
			Memo.Comments = dbContext.Comments.Where(c => c.MemoId == memo.MemoNumber).Select<Comment, CommentViewModel>(c => new CommentViewModel(c, UsersMapping[c.UserId])).ToList();
		}

	}

	private async void Accept(){
		string content = await commentEditor.GetHTML();

		int id = 1;
		if (dbContext.Comments.Any())
			id = dbContext.Comments.OrderBy(f => f.CommentId).Last().CommentId + 1;

		dbContext.Comments.Add(new Comment()
		{
			CommentId = id,
			CommentText = content,
			MemoId = memoNumber,
			UserId = UserId.Value
		});

		UserMemoReference memoRef = dbContext.MemoReferences.Where(m => m.UserId == UserId && m.MemoId == memoNumber && m.MemoStatus == MemoStatus.Pending).First();
		memoRef.ApprovalDate = DateTime.Now;
		memoRef.MemoStatus = MemoStatus.Approved;

		Memo memo = dbContext.Memos.Where(f => f.MemoNumber == Memo.MemoNumber).First();

		//Getting is there any reference which has not still approved the memo
		if(dbContext.MemoReferences.Where(f => (f.MemoId == memo.MemoNumber && f.MemoStatus != MemoStatus.Approved)).Any()){
			memo.MemoStatus = MemoStatus.Approved;
		}

		dbContext.SaveChanges();
		navManager.NavigateTo("/memomaster");
	}

	private async void Reject()
	{
		string content = await commentEditor.GetHTML();

		int id = 1;
		if (dbContext.Comments.Any())
			id = dbContext.Comments.OrderBy(f => f.CommentId).Last().CommentId + 1;

		dbContext.Comments.Add(new Comment()
			{
				CommentId = id,
				CommentText = content,
				MemoId = memoNumber,
				UserId = UserId.Value
			});

		UserMemoReference memoRef = dbContext.MemoReferences.Where(m => m.UserId == UserId && m.MemoId == memoNumber && m.MemoStatus == MemoStatus.Pending).First();
		memoRef.ApprovalDate = DateTime.Now;
		memoRef.MemoStatus = MemoStatus.Approved;

		Memo m = dbContext.Memos.Where(m => m.MemoNumber == memoNumber).First();
		m.MemoStatus = MemoStatus.Rejected;

		dbContext.SaveChanges();
		navManager.NavigateTo("/memomaster");
	}

}
