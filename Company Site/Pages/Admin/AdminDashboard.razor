@layout Company_Site.Shared.AdminLayout
@page "/admin"

@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using System.Linq
@using Company_Site.Helpers
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Company_Site.Pages.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navigationManager

<AuthorizeView Roles="Admin">

	<Authorized>

		<PageTitle>Admin Dashboard</PageTitle>

		<div class="container-fluid">
			<div class="row">
				<div class="col-11">
					<h3 class="mt-3">Users</h3>
				</div>
				<div class="col-1 d-flex justify-content-end align-items-center">
					<a class="btn btn-primary" @onclick="AddUser"><i class="fa fa-plus"></i></a>
				</div>
			</div>
		</div>

		<div class="container-fluid mt-4">
			<Table T="User" T2="string" Items="@Users" Headers="@Headers" GetId="@GetUserId" OnDelete="DeleteRecord" OnEdit="EditRecord" OnSearch="Search"></Table>
		</div>

	</Authorized>

	<NotAuthorized>
		<LoginRedirect ReturnUrl="/admin"/>
	</NotAuthorized>

</AuthorizeView>

@code {

	private int currentPage { get; set; } = 1;

	public List<User> Users = new List<User>();

	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();
		using(ApplicationDbContext dbContext = await contextFactory.CreateDbContextAsync()){
			Users = dbContext.Users.ToList();
		}
	}

	private Dictionary<string, Func<User, string>> Headers = new Dictionary<string, Func<User, string>>
	{
			["Id"] = (User user) => user.Id.ToString(),
			["First Name"] = (User user) => user.FirstName,
			["Last Name"] = (User user) => user.LastName,
			["Date of Joining"] = (User user) => user.DateOfJoining.ToString("dd/MM/yyyy"),
			["Email"] = (User user) => user.Email,
			["Department"] = (User user) => user.Department,
			["Role"] = (User user) => user.Role,
			["Designation"] = (User user) => user.Designation,
			["Mobile"] = (User user) => user.MobileNumber,
	};

	private void AddUser()
	{
		sessionStorage.SetAsync("UserPageMode", "add");
		navigationManager.NavigateTo("/admin/adduser");
	}

	private List<User> DeleteRecord(string userIdToDelete)
	{
		using (ApplicationDbContext dbContext = contextFactory.CreateDbContext())
		{
			dbContext.Users.Remove(dbContext.Users.First(u => u.Id == userIdToDelete));
			dbContext.SaveChanges();
			Users = dbContext.Users.ToList();
			return Users;
		}
	}

	private void EditRecord(string id)
	{
		sessionStorage.SetAsync("UserPageMode", "edit");
		sessionStorage.SetAsync("UserId", id);
		navigationManager.NavigateTo("/admin/adduser");
	}

	private List<string> GetUserRows(User u){
		return new List<string>()
		{
			u.Id.ToString(),
			u.FirstName, 
			u.LastName,
			u.DateOfJoining.ToLongDateString(),
			u.Email,
			u.Department,
			u.Role,
			u.Designation,
			u.MobileNumber,
		};
	}

	private string GetUserId(User user){
		return user.Id;
	}

	private List<User> Search(List<User> users, string text){
		text = text.ToLower();
		return users.Where(user => user.FirstName.ToLower().Contains(text) || user.LastName.ToLower().Contains(text)).ToList();
	}
}

