@layout Company_Site.Shared.AdminLayout
@page "/admin"

@using Company_Site.DB
@using Company_Site.Data
@using Company_Site.Enum
@using System.Linq
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ApplicationDbContext dbContext
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navigationManager

<PageTitle>Admin Dashboard</PageTitle>

<div class="modal" id="deleteConfirmModal">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirmation</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to delete the record?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" @onclick="DeleteRecord"  data-bs-dismiss="modal"  class="btn btn-danger">Confirm</button>
			</div>
		</div>
	</div>
</div>

<div class="container-fluid">
	<div class="row">
		<div class="col-11">
			<h3 class="mt-3">Users</h3>
		</div>
		<div class="col-1 d-flex justify-content-start align-items-center">
			<a class="btn btn-primary" @onclick="AddUser"><i class="fa fa-plus"></i></a>
		</div>
	</div>
</div>

<div class="container-fluid mt-4">
	<!--Table Header-->

	<EditForm Model="this">

		<div class="row">
			<div class="col-3">
				Show 
				<select id="enteriesSelection" class="select-box" @onchange="@RowsToShowChange">
					<option value="10">10</option>
					<option value="20">20</option>
					<option value="30">30</option>
					<option value="50">50</option>
				</select>
				enteries
			</div>
			<div class="col-8 d-flex justify-content-end">
				<div>
					<label for="searchBox">Search</label>
					<input type="text" class="roundedTextBox w-50"/>
				</div>
			</div>
		</div>

	</EditForm>

	<!--Table-->
	<div class="row my-3">
		<table class="table" id="MyTable" cellpadding="10" cellspacing="0" width="100%">
			<tr class="border-bottom-1">
				<th scope="col">
					<a class="btn-sortable" @onclick='(() => Sort("Id"))'>
						#
						@if(Sortings["Id"] == Sorting.Ascending){
								<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if(Sortings["Id"] == Sorting.Descending)
						{
								<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("First Name"))'>
						First Name
						@if (Sortings["First Name"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["First Name"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Last Name"))'>
						Last Name
						@if (Sortings["Last Name"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Last Name"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Date of Joining"))'>
						Date of Joining
						@if (Sortings["Date of Joining"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Date of Joining"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Email"))'>
						Email
						@if (Sortings["Email"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Email"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Department"))'>
						Department
						@if (Sortings["Department"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Department"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Role"))'>
						Role
						@if (Sortings["Role"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Role"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Designation"))'>
						Designation
						@if (Sortings["Designation"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Designation"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" >
					<a class="btn-sortable" @onclick='(() => Sort("Mobile"))'>
						Mobile
						@if (Sortings["Mobile"] == Sorting.Ascending)
						{
									<i class="ms-1 fa fa-arrow-up d-inline"></i>
						}
						else if (Sortings["Mobile"] == Sorting.Descending)
						{
									<i class="ms-1 fa fa-arrow-down d-inline"></i>
						}
					</a>
				</th>
				<th scope="col" ></th>
			</tr>
			@foreach (User user in DisplayedUsers)
			{
			<tr>
				<th scope="row">@user.Id</th>
				<td >@user.FirstName</td>
				<td >@user.LastName</td>
				<td >@user.DateOfJoining.ToShortDateString()</td>
				<td >@user.Email</td>
				<td >@user.Department</td>
				<td >@user.Role</td>
				<td >@user.Designation</td>
				<td >@user.Mobile</td>
				<td >
							<a @onclick='@(() => EditRecord(user.Id))'><i class="fa fa-edit btn btn-outline-primary"></i></a>
							<a @onclick='@(() => DeleteRecordId(user.Id))' data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"><i class="fa fa-trash btn btn-outline-danger"></i></a>
				</td>
			</tr>
			}
		</table>
	</div>
	<!--Table Footer-->
	<div class="row">
		<div class="col-4">
			<p class="lead fs-small">Showing @((currentPage - 1) * rowsToShow + 1) to @(DisplayedUsers.Count + ((currentPage - 1) * rowsToShow)) out of @Users.Count enteries</p>
		</div>
		<div class="col-8">
			<nav>
			  <ul class="pagination d-flex justify-content-end">
				<li class="page-item">
				  <a class="page-link" @onclick='@(() => ChangePage(1))' aria-label="Previous">
					<span aria-hidden="true">&laquo;</span>
					<span class="sr-only">Previous</span>
				  </a>
				</li>
				@foreach(int p in Pages)
				{
					<li class="page-item"><a class="page-link" @onclick='@(() => ChangePage(p))'>@p</a></li>
				}
				<li class="page-item">
				  <a class="page-link" @onclick='@(() => ChangePage(numberOfPages))' aria-label="Next">
					<span aria-hidden="true">&raquo;</span>
					<span class="sr-only">Next</span>
				  </a>
				</li>
			  </ul>
			</nav>
		</div>
	</div>
</div>


@code {

	///The number of rows to show
	private int rowsToShow { get; set; } = 10;

	///the number of pages to show
	private int numberOfPages { get; set; } = 1;

	private List<int> Pages
	{
		get
		{
			{
				List<int> pages = new List<int>();
				for (int p = 1; p <= numberOfPages; p++)
					pages.Add(p);
				return pages;
			}
		}
	}

	private int currentPage { get; set; } = 1;

	public List<User> Users = new List<User>();

	public List<User> DisplayedUsers = new List<User>();

	private int userIdToDelete;

	private Dictionary<string, Sorting> Sortings = new Dictionary<string, Sorting>()
	{
		["Id"] = Sorting.None,
		["First Name"]= Sorting.None,
		["Last Name"] = Sorting.None,
		["Date of Joining"] = Sorting.None,
		["Email"] = Sorting.None,
		["Department"] = Sorting.None,
		["Role"] = Sorting.None,
		["Designation"] = Sorting.None,
		["Mobile"] = Sorting.None,
	};

	protected override void OnInitialized()
	{
		base.OnInitialized();
		Users = dbContext.Users.ToList();
		numberOfPages = (Users.Count / rowsToShow) + 1;
		DisplayedUsers = Users.Take(rowsToShow * currentPage).ToList();
	}

	private void ChangePage(int page){
		currentPage = page;
		UpdateUsers();
	}

	//Fires when selected rows to show changes
	private void RowsToShowChange(ChangeEventArgs e){
		rowsToShow = int.Parse(e.Value.ToString());
		UpdateUsers();
	}

	private void UpdateUsers(){
		DisplayedUsers = Users.Take(currentPage * rowsToShow).Skip((currentPage - 1) * rowsToShow).ToList();
	}

	private void ResetSorting(string toSkip = null)
	{
		foreach (string key in Sortings.Keys)
		{
			if (key == toSkip)
				continue;
			Sortings[key] = Sorting.None;
		}
	}

	private void AddUser(){
		sessionStorage.SetAsync("UserPageMode", "add");
		navigationManager.NavigateTo("/admin/adduser");
	}

	private void DeleteRecordId(int id){
		userIdToDelete = id;
	}

	private void DeleteRecord(){
		dbContext.Users.Remove(dbContext.Users.First(u => u.Id == userIdToDelete));
		Users = dbContext.Users.ToList();
	}

	private void EditRecord(int id){
		sessionStorage.SetAsync("UserPageMode", "edit");
		sessionStorage.SetAsync("UserId", id);
		navigationManager.NavigateTo("/admin/adduser");
	}

	///Sorts the table with the specified column
	private void Sort(string name)
	{
		ResetSorting(name);
		if (Sortings[name] == Sorting.None)
			Sortings[name] = Sorting.Ascending;
		else if (Sortings[name] == Sorting.Ascending)
			Sortings[name] = Sorting.Descending;
		else
			Sortings[name] = Sorting.Ascending;

		SortRecords(name);
	}

	private void SortRecords(string name)
	{
		switch (name)
		{
			case "Id":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Id).ToList();
				else
					Users = Users.OrderByDescending(func => func.Id).ToList();
				return;
			case "First Name":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.FirstName).ToList();
				else
					Users = Users.OrderByDescending(func => func.FirstName).ToList();
				return;
			case "Last Name":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.LastName).ToList();
				else
					Users = Users.OrderByDescending(func => func.LastName).ToList();
				return;
			case "Date of Joining":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.DateOfJoining).ToList();
				else
					Users = Users.OrderByDescending(func => func.DateOfJoining).ToList();
				return;
			case "Email":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Email).ToList();
				else
					Users = Users.OrderByDescending(func => func.Email).ToList();
				return;
			case "Department":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Department).ToList();
				else
					Users = Users.OrderByDescending(func => func.Department).ToList();
				return;
			case "Role":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Role).ToList();
				else
					Users = Users.OrderByDescending(func => func.Role).ToList();
				return;
			case "Designation":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Designation).ToList();
				else
					Users = Users.OrderByDescending(func => func.Designation).ToList();
				return;
			case "Mobile":
				if (Sortings[name] == Sorting.Ascending)
					Users = Users.OrderBy(func => func.Mobile).ToList();
				else
					Users = Users.OrderByDescending(func => func.Mobile).ToList();
				return;
		}
	}

}
